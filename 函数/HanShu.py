#!/usr/bin/env python
#-*- coding:utf-8 -*-
'''
Name:HD
函数:
HD:2017年3月28日15:57:19
'''
r'''
    函数就是将一些语句集合在一起的部件,它们能够不止一次地在程序中运行,函数还能够计算出一个返回值,并能够改变作为函数输入的参数，而这些参数在代码运行时也许每次都不同。
    函数就是在编程过程中复制粘贴的代替，

'''

r'''
    编写内置函数:
        def  语句:
            def 语句将创建一个函数对象并将其赋值给一个变量名。
            def 语句格式如下:
                def <funcationName>(arg1,arg2,...argN):
                    <代码块>
                
                就像所有的多行python语句一样,def包含了首行并有一个代码块跟随在后边,这个代码块通常都会缩进或者冒号后边简单的一句。而这个代码块就成为了函数的主体，也就是每当调用函数时python所执行的语句。
                
                def 首行定义了函数名,赋值给了函数对象，并在括号中包含了0个或以上的参数(也有时候称为形参)。在函数调用的时候，在首行的参数名赋值给了括号中传递来的对象。
                
                函数主体往往包含了一条return 语句：
                    def <functionName>(arg1,agr2,...argN):
                        ......
                        return <value>
                        
                    Python 的return 语句可以在函数主体中的任何地方出现。它表示函数调用的结束，并将结果返回至函数调用处。return 语句是可选的，如果没有return 语句,那么函数将会在控制流程执行完函数主体时结束。一个没有返回值的函数自动返回了none对象
                    
                
                def 语句是实时执行的：
                    python的def语句实际上是一个可执行的语句:
                        当它运行的时候,它创建一个新的函数对象并将其赋值给一个变量名。
                        其次因为它是一个语句,一个def可以出现在任一句可以出现的地方，甚至嵌套在其他的语句中。
                        函数还可以通过嵌套在if语句中去实现不同的函数定义,这样也是合法的：
                            if test:
                                def func():
                                    ....
                            else:
                                def func():
                                    ...
                            func() #调用方法
                            
                      在程序运行时简单地给一个变量进行复制。python函数在程序运行之前并不需要全部定义。def 在运行时在进行评估，而在def之中的代码在函数调用之后才会评估。
                      因为函数定义是实时发生的,所以对于函数名来说并没什么特别之处，关键之处在于函数名所引用的那个对象:
                      例:
                        othername = func
                        othername()
                        
                        在这里函数赋值给一个不同的变量名,并通过新的变量名进行了调用。在python中函数仅仅是对象，在程序执行时他清楚的记录在内内存之中。
                    
        
            
    
'''